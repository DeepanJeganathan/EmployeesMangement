@model PaginatedList<EmployeesManagementApp.ViewModel.EmployeeIndexViewModel>

@{
    ViewData["Title"] = "Index";
}
<hr />
<h4>Employee Details <i class="fas fa-clipboard-list"></i></h4>
<hr />

<p>
    <a asp-action="Create"><i class="fas fa-user-plus "></i> Create New</a>
</p>

<div class="table-top-section">
    <div>
        <form asp-action="Index" method="get">
            <div class="form-actions searchForm no-color">
                <p>
                    Find by Last Name: <input type="text" autocomplete="off" class="searchbox-area " name="SearchString" value="@ViewData["currentFilter"]" />
                    <input type="submit" value="Search" class="btn btn-default" />
                    <ul class="suggestions"></ul>|
                    <a asp-action="Index">Back to Top</a>
                </p>
            </div>
        </form>
    </div>
    <div class="active-btns hide-on-phone">
        <i class="fas fa-user text-primary "> Production</i>
        <i class="fas fa-truck-loading text-primary"> Shipping</i>
        <i class="fas fa-plus text-danger"> First Aid Certified</i>
        <i class="fas fa-user-shield text-warning">Utility</i>
        <form asp-action="Index" method="get">
            <button type="submit" value="true" class="btn btn-danger " name="isFirstAid">First Aid Certified</button>
            <button type="submit" value="true" class="btn btn-primary " name="status">Active</button>
            <button type="submit" value="false" class="btn btn-primary" name="status">Inactive</button>
        </form>
    </div>
</div>




<table class="table table-striped table-hover " style="position:relative;">

    <thead>
        <tr>
            <th class="text-center">
                Employee Number
            </th>
            <th>
                First Name
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Last Name</a>

            </th>

            <th class="hide-on-phone">
                Pay Level
            </th>
            <th class="hide-on-phone">
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Hire Date</a>

            </th>
            <th class="hide-on-phone">
                Seniority
            </th>
            <th class="hide-on-phone">
                Status
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {

            <tr>
                <td class="icon-spacing">

                    @if (!item.Shipping == true && !item.Utility == true)
                    {
                        <a asp-action="Details" asp-route-id="@item.EmployeeNumber"><i class="fas fa-lg fa-user text-primary "></i> </a><strong>@Html.DisplayFor(modelItem => item.EmployeeNumber)</strong>
                    }
                    else if (!item.Shipping == true && !item.Utility == false)
                    {
                        <a asp-action="Details" asp-route-id="@item.EmployeeNumber"><i class="fas fa-lg text-warning fa-user-shield "></i></a><strong>@Html.DisplayFor(modelItem => item.EmployeeNumber)</strong>
                    }
                    else
                    {
                        <a asp-action="Details" asp-route-id="@item.EmployeeNumber">
                            <i class="fas fa-lg   fa-truck-loading text-primary icon-spacing forklift-icon"></i> </a><strong>@Html.DisplayFor(modelItem => item.EmployeeNumber)</strong>
                            }

                    </td>
                <td>

                    @Html.DisplayFor(modelItem => item.FirstName)
                    @if (item.FirstAidCertified == true)
                    {
                        <i class="fas fa-plus text-danger"></i>

                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>

                <td class="hide-on-phone">
                    @Html.DisplayFor(modelItem => item.PayLevel)
                </td>
                <td class="hide-on-phone">
                    @Html.DisplayFor(modelItem => item.HireDate)
                </td>

                <td class="hide-on-phone" >

                    @(DateTime.Now.Year - item.HireDate.Year) Years
                </td>
                <td class="hide-on-phone">
                    @if (!item.status == true)
                    {
                        <span class="text-danger">In Active</span>
                    }
                    else
                    {
                        <span class="text-success">Active</span>
                    }
                </td>

                <td class="hide-on-phone"  >
                    <a asp-action="Edit" asp-route-id="@item.EmployeeNumber">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.EmployeeNumber">Details</a> |
                    <a  asp-action="Delete" asp-route-id="@item.EmployeeNumber">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>


@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-primary @nextDisabled">
    Next
</a>

<script>

    let arry =@Html.Raw(ViewData["employeeNames"]);
    let searchBox = document.querySelector('.searchbox-area');
    let suggestions = document.querySelector('.suggestions')
    let lastnames = arry.map(x => x.LastName.trim().toLowerCase());

    searchBox.addEventListener('keyup', GetValue);

    let UniqueLastNames = lastnames.filter((x, i, array) => {

        if (!(array.indexOf(x, i + 1) > i)) {
            return -1;
        }

    }) 

    function GetValue(e) {
        let values = "";
        values = e.target.value;
        //returns results from  (array,argument)=> filter list[arry]=> condition if each element in array consists of search term (==-1)
        const filteredLastNames = UniqueLastNames.filter(x => x.toLowerCase().trim().indexOf(values.toLowerCase().trim()) !== -1);
        const results = filteredLastNames.slice(0,15).map((x) => {
            return `<li><a>${x}</a></li>`
        })
        suggestions.innerHTML = results.join(" ");
        console.log(results.join(" "));
         console.log(e.which)
    }

    suggestions.addEventListener('click', searchName);

    function searchName(e) {
        console.log(e.target.textContent)
        searchBox.value = e.target.textContent;
        suggestions.innerHTML = "";
    }
</script>